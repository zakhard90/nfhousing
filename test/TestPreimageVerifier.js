// + define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates

const Verifier = artifacts.require('Verifier')
const p1 = require('./proofs/proof_token_1.json')
const p2 = require('./proofs/proof_token_2.json')
const p3 = require('./proofs/proof_token_3.json')
const p4 = require('./proofs/proof_token_4.json')
const p5 = require('./proofs/proof_token_5.json')

const proofs = [p1, p2, p3, p4, p5]

require('chai').use(require('chai-as-promised')).should()

contract('Verifier', accounts => {

    const [owner] = accounts
    let result

    const EVM_REVERT = "VM Exception while processing transaction: revert";

    Verifier.defaults({
        gas: 6000000,
        gasPrice: '2000000'
    })


    describe('proof verification', function () {
        beforeEach(async function () {
            this.contract = await Verifier.new({ from: owner })
        })
        // + Test verification with correct proof
        // + use the contents from proof.json generated from zokrates steps
        it('should verify the transaction correctly', async function () {
            for (let p of proofs) {
                result = await this.contract.verifyTx.call(p.proof, p.inputs)
                result.should.be.true
            }
        })

        // + Test verification with incorrect proof
        it('should fail the transaction verification', async function () {
            let right = proofs[0]
            let wrong = proofs[1]
            result = await this.contract.verifyTx.call(right.proof, wrong.inputs)
            result.should.be.false
        })
    })
})
